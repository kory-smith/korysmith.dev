---
import BaseLayout from "../../layouts/BaseLayout.astro";
import type {
  PartialBlockObjectResponse,
  BlockObjectResponse,
  ListBlockChildrenResponse,
  RichTextItemResponse,
} from "@notionhq/client/build/src/api-endpoints";
import { renderPicture } from "astro-imagetools/api";


import fs from "fs";
import path from "path";

export async function getStaticPaths() {
  const NOTION_SECRET = import.meta.env.PUBLIC_NOTION_SECRET;
  function isBlockResponseArray(
    array: Array<PartialBlockObjectResponse | BlockObjectResponse>
  ): array is Array<BlockObjectResponse> {
    return array?.every((item) => {
      return typeof item === "object" && !("partial" in item);
    });
  }

  async function notionBlocksToHtml(page: ListBlockChildrenResponse) {
    const { results } = page;
    let html = "";
    if (isBlockResponseArray(results)) {
      for (let i = 0; i < results.length; i++) {
        const result = results[i];
        if (result.type === "paragraph") {
          html += `<p>${notionRichTextToHtml(result.paragraph.rich_text)}</p>`;
        } else if (result.type === "heading_1") {
          html += `<h1>${notionRichTextToHtml(
            result.heading_1.rich_text
          )}</h1>`;
        } else if (result.type === "heading_2") {
          html += `<h2>${notionRichTextToHtml(
            result.heading_2.rich_text
          )}</h2>`;
        } else if (result.type === "heading_3") {
          html += `<h3>${notionRichTextToHtml(
            result.heading_3.rich_text
          )}</h3>`;
        } else if (result.type === "bulleted_list_item") {
          html += `<ul>${notionRichTextToHtml(
            result.bulleted_list_item.rich_text
          )}</ul>`;
        } else if (result.type === "numbered_list_item") {
          html += `<li>${notionRichTextToHtml(
            result.numbered_list_item.rich_text
          )}</li>`;
        } else if (result.type === "divider") {
          html += "<hr>";
        } else if (result.type === "code") {
          html += `<pre><code>${notionRichTextToHtml(
            result.code.rich_text
          )}</code></pre>`;
        } else if (result.type === "quote") {
          html += `<blockquote>${notionRichTextToHtml(
            result.quote.rich_text
          )}</blockquote>`;
        } else if (result.type === "image") {
          html += await handleImage(result);
        } else {
          html += `<p>Block type "${result.type}" not supported.</p>`;
        }
      }
    }
    return html;
  }

  async function handleImage(result: BlockObjectResponse) {
    const image = await fetch(result.image.file.url, {
      method: "GET",
    });

    const imageBuffer = await image.arrayBuffer();

    const dir = path.join(process.cwd(), "./src/assets");

    const realPath = path.join(dir, `${result.id}.png`);
    fs.writeFileSync(
    realPath,
      Buffer.from(imageBuffer)
    );

    const { picture } = await renderPicture({
      src: realPath,
      alt: "test"
    })
    

  return picture
  }

  function notionRichTextToHtml(richText: RichTextItemResponse[]) {
    let html = "";
    richText.forEach((item) => {
      if (item.type === "text") {
        let content = item.text.content;
        if (item.annotations.italic) {
          content = `<em>${content}</em>`;
        }
        if (item.annotations.bold) {
          content = `<strong>${content}</strong>`;
        }
        if (item.annotations.underline) {
          content = `<u>${content}</u>`;
        }
        if (item.annotations.strikethrough) {
          content = `<s>${content}</s>`;
        }
        if (item.annotations.code) {
          content = `<code>${content}</code>`;
        }
        html += content;
      }
    });
    return html;
  }

  function convertToSlug(string: string) {
    const slug = string
      .trim()
      .replace(/[^\w\s-]/g, "")
      .replace(/ /g, "-")
      .toLowerCase();
    return slug;
  }

  const ARTICLES_DATABASE_ID = "bf7e16c44b7b46a6ac4d11d5d4db77d8";

  const response = await fetch(
    `https://api.notion.com/v1/databases/${ARTICLES_DATABASE_ID}/query`,
    {
      method: "POST",
      headers: {
        Authorization: `Bearer ${NOTION_SECRET}`,
        "Notion-Version": "2021-05-13",
      },
    }
  ).then((res) => res.json());

  const massagedArticles = response.results.map((article) => {
    const title = article.properties.Name.title[0].plain_text;
    const slug = convertToSlug(title);
    return {
      id: article.id,
      title,
      slug,
      status: article.properties.Status.select.name,
      created: article.properties["Created Time"].created_time,
      lastEdited: article.properties["Last Edited Time"].last_edited_time,
    };
  });

  const massagedArticlesWithContentPromises = massagedArticles.map(
    async (article) => {
      const childBlocks = await fetch(
        `https://api.notion.com/v1/blocks/${article.id}/children?page_size=100`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${NOTION_SECRET}`,
            "Notion-Version": "2022-02-22",
          },
        }
      ).then((res) => res.json());
      const html = notionBlocksToHtml(childBlocks);
      return {
        ...article,
        content: html,
      };
    }
  );

  const massagedArticlesWithContent = await Promise.all(
    massagedArticlesWithContentPromises
  );

  return massagedArticlesWithContent.map((article) => {
    return {
      params: {
        article: article.slug,
      },
      props: {
        article,
      },
    };
  });
}

const { article } = Astro.props;
---

<BaseLayout title={article.title} description="Blog page">
  <div set:html={article.content} />
</BaseLayout>
