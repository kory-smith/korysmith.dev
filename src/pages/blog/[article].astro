---
import { Client } from "@notionhq/client";

import BaseLayout from "../../layouts/BaseLayout.astro";
import Debug from "astro/components/Debug.astro";
import type {
  PartialBlockObjectResponse,
  BlockObjectResponse,
  ListBlockChildrenResponse,
  RichTextItemResponse,
  PageObjectResponse,
} from "@notionhq/client/build/src/api-endpoints";

const notion = new Client({
  auth: import.meta.env.NOTION_SECRET,
});

const ARTICLES_DATABASE_ID = "bf7e16c44b7b46a6ac4d11d5d4db77d8";

// Get all the articles from the database where the status is "Published"
const articles = await notion.databases.query({
  database_id: ARTICLES_DATABASE_ID,
  // filter: {
  //   property: "Status",
  //   select: {
  //     equals: "Published",
  //   },
  // },
});

function convertToSlug(string: string) {
  const slug = string
    .trim()
    .replace(/[^\w\s-]/g, "")
    .replace(/ /g, "-")
    .toLowerCase();
  return slug;
}

const massagedArticles = articles.results.map((article) => {
  const articleAsPageObject = article as PageObjectResponse;
  const title = articleAsPageObject.properties.Name.title[0].plain_text;
  const slug = convertToSlug(title);
  return {
    id: articleAsPageObject.id,
    title,
    slug,
    status: articleAsPageObject.properties.Status.select.name,
    created: articleAsPageObject.properties["Created Time"].created_time,
    lastEdited:
      articleAsPageObject.properties["Last Edited Time"].last_edited_time,
  };
});

// iterate through massagedArticles, get the children of each one, and make the html from those children into the "content" property
const articlesWithContentPromises = massagedArticles.map(async (article) => {
  const blocks = await notion.blocks.children.list({
    block_id: article.id,
  });
  const html = notionBlocksToHtml(blocks);
  return {
    ...article,
    content: html,
  };
});

const articlesWithMarkdown = await Promise.all(articlesWithContentPromises);

// I still need the title, created time, last edited time, and status
// I also need to turn the title into

// This is the good way to get all the content (children) of a page!
// Hardcoded for now, but I can get the page ID from the database
const blocks = await notion.blocks.children.list({
  block_id: "ee35c526-309c-45cb-bbc1-db4e778ef10f",
});

export async function getStaticPaths() {
  // fetch all articles from the articles database

  function isBlockResponseArray(
    array: Array<PartialBlockObjectResponse | BlockObjectResponse>
  ): array is Array<BlockObjectResponse> {
    return array?.every((item) => {
      return typeof item === "object" && !("partial" in item);
    });
  }

  function notionBlocksToHtml(page: ListBlockChildrenResponse) {
    const { results } = page;
    let html = "";
    if (isBlockResponseArray(results)) {
      results.forEach((result) => {
        switch (result.type) {
          case "paragraph":
            html += `<p>${notionRichTextToHtml(
              result.paragraph.rich_text
            )}</p>`;
            break;
          case "heading_1":
            html += `<h1>${notionRichTextToHtml(
              result.heading_1.rich_text
            )}</h1>`;
            break;
          case "heading_2":
            html += `<h2>${notionRichTextToHtml(
              result.heading_2.rich_text
            )}</h2>`;
            break;
          case "heading_3":
            html += `<h3>${notionRichTextToHtml(
              result.heading_3.rich_text
            )}</h3>`;
            break;
          case "bulleted_list_item":
            html += `<ul>${notionRichTextToHtml(
              result.bulleted_list_item.rich_text
            )}</ul>`;
            break;
          case "numbered_list_item":
            html += `<li>${notionRichTextToHtml(
              result.numbered_list_item.rich_text
            )}</li>`;
            break;
          case "divider":
            html += "<hr>";
            break;
          case "code":
            html += `<pre><code>${notionRichTextToHtml(
              result.code.rich_text
            )}</code></pre>`;
            break;

          case "quote":
            html += `<blockquote>${notionRichTextToHtml(
              result.quote.rich_text
            )}</blockquote>`;
            break;
          case "image":
            html += `<img src="${result.image.file.url}" alt="${
              result.image.caption
                ? notionRichTextToHtml(result.image.caption)
                : ""
            }">`;
            break;
          default:
            html += `<p>Block type "${result.type}" not
      supported.</p>`;
        }
      });
    }

    return html;
  }

  function notionRichTextToHtml(richText: RichTextItemResponse[]) {
    let html = "";
    richText.forEach((item) => {
      if (item.type === "text") {
        let content = item.text.content;
        if (item.annotations.italic) {
          content = `<em>${content}</em>`;
        }
        if (item.annotations.bold) {
          content = `<strong>${content}</strong>`;
        }
        if (item.annotations.underline) {
          content = `<u>${content}</u>`;
        }
        if (item.annotations.strikethrough) {
          content = `<s>${content}</s>`;
        }
        if (item.annotations.code) {
          content = `<code>${content}</code>`;
        }
        html += content;
      }
    });
    return html;
  }

  const ARTICLES_DATABASE_ID = "bf7e16c44b7b46a6ac4d11d5d4db77d8";

  const response = await fetch(
    `https://api.notion.com/v1/databases/${ARTICLES_DATABASE_ID}/query`,
    {
      method: "POST",
      headers: {
        Authorization: `Bearer ${import.meta.env.NOTION_SECRET}`,
        "Notion-Version": "2021-05-13",
      },
    }
  ).then((res) => res.json());

  function convertToSlug(string: string) {
    const slug = string
      .trim()
      .replace(/[^\w\s-]/g, "")
      .replace(/ /g, "-")
      .toLowerCase();
    return slug;
  }

  const massagedArticles = response.results.map((article) => {
    const title = article.properties.Name.title[0].plain_text;
    const slug = convertToSlug(title);
    return {
      id: article.id,
      title,
      slug,
      status: article.properties.Status.select.name,
      created: article.properties["Created Time"].created_time,
      lastEdited: article.properties["Last Edited Time"].last_edited_time,
    };
  });

  const massagedArticlesWithContentPromises = massagedArticles.map(
    async (article) => {
      const childBlocks = await fetch(
        `https://api.notion.com/v1/blocks/${article.id}/children?page_size=100`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${import.meta.env.NOTION_SECRET}`,
            "Notion-Version": "2022-02-02",
          },
        }
      ).then((res) => res.json());
      const html = notionBlocksToHtml(childBlocks);
      return {
        ...article,
        content: html,
      };
    }
  );

  return massagedArticles.map((article) => {
    return {
      params: {
        article: article.slug,
      },
      props: {
        article,
      },
    };
  });
}

export const prerender = true;
const { article } = Astro.props;
---

{article.slug}
