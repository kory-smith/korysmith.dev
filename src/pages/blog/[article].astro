---
import { Client } from "@notionhq/client";

import BaseLayout from "../../layouts/BaseLayout.astro";
import Debug from "astro/components/Debug.astro";
import type {
  PartialBlockObjectResponse,
  BlockObjectResponse,
  ListBlockChildrenResponse,
  RichTextItemResponse,
} from "@notionhq/client/build/src/api-endpoints";

const notion = new Client({
  auth: import.meta.env.NOTION_SECRET,
});

const ARTICLES_DATABASE_ID = "bf7e16c44b7b46a6ac4d11d5d4db77d8";

// I still need the title, created time, last edited time, and status
// I also need to turn the title into

// This is the good way to get all the content (children) of a page!
// Hardcoded for now, but I can get the page ID from the database
const blocks = await notion.blocks.children.list({
  block_id: "ee35c526-309c-45cb-bbc1-db4e778ef10f",
});

function isBlockResponseArray(
  array: Array<PartialBlockObjectResponse | BlockObjectResponse>
): array is Array<BlockObjectResponse> {
  return array?.every((item) => {
    return typeof item === "object" && !("partial" in item);
  });
}

function notionBlocksToHtml(page: ListBlockChildrenResponse) {
  const { results } = page;
  let html = "";
  if (isBlockResponseArray(results)) {
    results.forEach((result) => {
      switch (result.type) {
        case "paragraph":
          html += `<p>${notionRichTextToHtml(result.paragraph.rich_text)}</p>`;
          break;
        case "heading_1":
          html += `<h1>${notionRichTextToHtml(
            result.heading_1.rich_text
          )}</h1>`;
          break;
        case "heading_2":
          html += `<h2>${notionRichTextToHtml(
            result.heading_2.rich_text
          )}</h2>`;
          break;
        case "heading_3":
          html += `<h3>${notionRichTextToHtml(
            result.heading_3.rich_text
          )}</h3>`;
          break;
        case "bulleted_list_item":
          html += `<ul>${notionRichTextToHtml(
            result.bulleted_list_item.rich_text
          )}</ul>`;
          break;
        case "numbered_list_item":
          html += `<li>${notionRichTextToHtml(
            result.numbered_list_item.rich_text
          )}</li>`;
          break;
        case "divider":
          html += "<hr>";
          break;
        case "code":
          html += `<pre><code>${notionRichTextToHtml(
            result.code.rich_text
          )}</code></pre>`;
          break;

        case "quote":
          html += `<blockquote>${notionRichTextToHtml(
            result.quote.rich_text
          )}</blockquote>`;
          break;
        case "image":
          html += `<img src="${result.image.file.url}" alt="${
            result.image.caption
              ? notionRichTextToHtml(result.image.caption)
              : ""
          }">`;
          break;
        default:
          html += `<p>Block type "${result.type}" not
      supported.</p>`;
      }
    });
  }

  return html;
}

function notionRichTextToHtml(richText: RichTextItemResponse[]) {
  let html = "";
  richText.forEach((item) => {
    if (item.type === "text") {
      let content = item.text.content;
      if (item.annotations.italic) {
        content = `<em>${content}</em>`;
      }
      if (item.annotations.bold) {
        content = `<strong>${content}</strong>`;
      }
      if (item.annotations.underline) {
        content = `<u>${content}</u>`;
      }
      if (item.annotations.strikethrough) {
        content = `<s>${content}</s>`;
      }
      if (item.annotations.code) {
        content = `<code>${content}</code>`;
      }
      html += content;
    }
  });

  return html;
}

const html = notionBlocksToHtml(blocks);

export function getStaticPaths() {
  return [{ params: { article: "sample-article" } }];
}

export const prerender = true;
---

<!-- <Debug {page} /> -->
<BaseLayout>
  <article set:html={html} />
</BaseLayout>
